<!DOCTYPE html>
<html lang="en">

<head>
  <%- include("modules/head") %>
  <%- include("modules/defaults") %>
  <title>MediaMix</title>
  <style>
    /* Add CSS styles for the video tiles */
    .videos-container {
      display: flex;
      overflow-x: auto; /* Enable horizontal scrolling */
    }

    .video-home {
      width: 30vw;
      margin-right: 10px; /* Add spacing between video tiles */
    }

    /* Remove margin-right for the last video tile to prevent extra spacing */
    .video-home:last-child {
      margin-right: 0;
    }

    .video-thumbnail-home {
      max-width: 100%;
    }

    .video-details-home {
      max-width: 100%;
    }
  </style>
</head>

<body>
  <%- include("modules/navbar") %>
  <main class="m-4">
    <section>
      <h3><a href="/?cat=1">Recent Videos <i class="fa-solid fa-chevron-right"></i></a></h3>
      <div class="videos-container" id="recentVideos">
        <!-- Video tiles will be dynamically generated here -->
      </div>
    </section>
  </main>
  <script src="js/script.js"></script>
  <script src="js/mobile.js"></script>
  <script>
    // Fetch recent videos from the API with an optional parameter for the number of videos
async function fetchRecentVideos(numVideos) {
  try {
    const response = await fetch(`/api/v1/recentVideos?limit=${numVideos}`);
    if (!response.ok) {
      throw new Error('Failed to fetch recent videos');
    }
    const data = await response.json();
    return data.videos || [];
  } catch (error) {
    console.error(error);
    return [];
  }
}

// Function to render video tiles
async function renderVideoTiles() {
  // Check the 'cat' URL parameter
  const urlParams = new URLSearchParams(window.location.search);
  const catParam = urlParams.get('cat');

  // Set the number of videos to fetch based on the 'cat' parameter
  const numVideos = catParam === '1' ? 36 : 3;

  // Check if 'cat' is not present, equal to 0, or equal to 1 before fetching videos
  if (catParam === null || catParam === '0' || catParam === '1') {
    try {
      // Fetch recent videos
      const videos = await fetchRecentVideos(numVideos);
      const videosContainer = document.getElementById('recentVideos');

      // Clear the existing content
      videosContainer.innerHTML = '';

      videos.forEach((video) => {
        const videoTile = document.createElement('a');
        videoTile.className = 'video-home';
        videoTile.href = "/video/watch?v=" + video.VideoID;

        const thumbnail = document.createElement('img');
        thumbnail.className = 'video-thumbnail-home';
        thumbnail.src = video.ThumbnailURL;
        thumbnail.alt = video.Title;

        const videoDetails = document.createElement('div');
        videoDetails.className = 'video-details-home';
        const title = document.createElement('h6');
        title.textContent = video.Title;
        videoDetails.appendChild(title);

        videoTile.appendChild(thumbnail);
        videoTile.appendChild(videoDetails);
        videosContainer.appendChild(videoTile);
      });

      console.log('Video tiles successfully rendered!');
    } catch (error) {
      console.error('Error fetching and rendering video tiles:', error);
    }
  }

  // Hide categories and related text if 'cat' is greater than or equal to 1
  if (catParam !== null && parseInt(catParam) >= 1) {
    const categoriesSection = document.querySelector('section');
    categoriesSection.style.display = 'none';
  }
}

// Call the function to render video tiles
renderVideoTiles();


  </script>
</body>

</html>
